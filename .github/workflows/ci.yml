name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', 'tests/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
        pip install -r tests/requirements.txt
        
    - name: Run linting
      run: |
        pip install flake8 black isort
        # Check code formatting with black
        black --check src/ tests/
        # Check import sorting
        isort --check-only src/ tests/
        # Run flake8 for code style
        flake8 src/ tests/ --max-line-length=120 --extend-ignore=E203,W503
      continue-on-error: true  # Don't fail on linting for now
        
    - name: Run unit tests with coverage
      run: |
        pytest tests/test_lambda_function.py -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v -m "not slow"
      env:
        AWS_DEFAULT_REGION: us-east-1
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false  # Don't fail if codecov is down
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          .coverage
          coverage.xml
        retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        pip install -r src/requirements.txt
        pip install -r tests/requirements.txt
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -ll -i -x tests/
        
    - name: Check for known vulnerabilities
      run: |
        safety check --json
      continue-on-error: true  # Don't fail on warnings

  deploy-check:
    name: Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        
    - name: Validate SAM template
      run: |
        sam validate --lint
        
    - name: Build SAM application
      run: |
        sam build
        
    - name: Check build output
      run: |
        ls -la .aws-sam/build/
        
    - name: Package size check
      run: |
        # Check that Lambda package is not too large
        PACKAGE_SIZE=$(du -sb .aws-sam/build/CostMonitorFunction/ | cut -f1)
        MAX_SIZE=52428800  # 50MB in bytes
        if [ $PACKAGE_SIZE -gt $MAX_SIZE ]; then
          echo "ERROR: Lambda package size ($PACKAGE_SIZE bytes) exceeds 50MB limit"
          exit 1
        fi
        echo "Package size: $PACKAGE_SIZE bytes"

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, security-scan, deploy-check]
    if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify failure
      run: |
        echo "CI/CD pipeline failed for commit ${{ github.sha }}"
        echo "See workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"